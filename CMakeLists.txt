cmake_minimum_required(VERSION 2.6)

PROJECT(ITK_OneShot)
SET( INSTALL_DIR ${CMAKE_INSTALL_PREFIX} )

FIND_PACKAGE(ITK REQUIRED)
INCLUDE(${ITK_USE_FILE})

# the 'os' prefix stands for "one shot" and is simply to group the executables when they are installed

SET(OS_AbsImage ON CACHE BOOL "Compute the absolute value (pixel-wise) of an image" FORCE)
if(OS_AbsImage)
  ADD_EXECUTABLE(osAbsImage AbsImage.cxx)
  TARGET_LINK_LIBRARIES(osAbsImage ${ITK_LIBRARIES})
  INSTALL( TARGETS osAbsImage RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_RGBtoHSV ON CACHE BOOL "Convert an RGB image to an HSV image" FORCE)
if(OS_RGBtoHSV)
  ADD_EXECUTABLE(osRGBtoHSV RGBtoHSV.cxx)
  TARGET_LINK_LIBRARIES(osRGBtoHSV ${ITK_LIBRARIES})
  INSTALL( TARGETS osRGBtoHSV RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_AddImages ON CACHE BOOL "Add two images" FORCE)
if(OS_AddImages)
  ADD_EXECUTABLE(osAddImages AddImages.cxx)
  TARGET_LINK_LIBRARIES(osAddImages ${ITK_LIBRARIES})
  INSTALL( TARGETS osAddImages RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_AddNoise ON CACHE BOOL "Add noise to an image" FORCE)
if(OS_AddNoise)
  ADD_EXECUTABLE(osAddNoise AddNoise.cxx)
  TARGET_LINK_LIBRARIES(osAddNoise ${ITK_LIBRARIES})
  INSTALL( TARGETS osAddNoise RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_Blur ON CACHE BOOL "Blur an image" FORCE)
if(OS_Blur)
  ADD_EXECUTABLE(osBlur Blur.cxx)
  TARGET_LINK_LIBRARIES(osBlur ${ITK_LIBRARIES})
  INSTALL( TARGETS osBlur RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_AndImages ON CACHE BOOL "Binary AND two images" FORCE)
if(OS_AndImages)
  ADD_EXECUTABLE(osAndImages AndImages.cxx)
  TARGET_LINK_LIBRARIES(osAndImages ${ITK_LIBRARIES})
  INSTALL( TARGETS osAndImages RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_AppendImageComponents ON CACHE BOOL "Append channels to an image" FORCE)
if(OS_AppendImageComponents)
  ADD_EXECUTABLE(osAppendImageComponents AppendImageComponents.cxx)
  TARGET_LINK_LIBRARIES(osAppendImageComponents ${ITK_LIBRARIES})
  INSTALL( TARGETS osAppendImageComponents RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_CannyEdges ON CACHE BOOL "Compute the edges in an image" FORCE)
if(OS_CannyEdges)
  ADD_EXECUTABLE(osCannyEdges CannyEdges.cxx)
  TARGET_LINK_LIBRARIES(osCannyEdges ${ITK_LIBRARIES})
  INSTALL( TARGETS osCannyEdges RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_ComputeDerivatives ON CACHE BOOL "Compute the derivatives of an image" FORCE)
if(OS_ComputeDerivatives)
  ADD_EXECUTABLE(osComputeDerivatives ComputeDerivatives.cxx)
  TARGET_LINK_LIBRARIES(osComputeDerivatives ${ITK_LIBRARIES})
  INSTALL( TARGETS osComputeDerivatives RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_ComputeLaplacian ON CACHE BOOL "Compute the Laplacian of an image" FORCE)
if(OS_ComputeLaplacian)
  ADD_EXECUTABLE(osComputeLaplacian ComputeLaplacian.cxx)
  TARGET_LINK_LIBRARIES(osComputeLaplacian ${ITK_LIBRARIES})
  INSTALL( TARGETS osComputeLaplacian RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_Sharpen ON CACHE BOOL "Sharpen an image" FORCE)
if(OS_Sharpen)
  ADD_EXECUTABLE(osSharpen Sharpen.cxx)
  TARGET_LINK_LIBRARIES(osSharpen ${ITK_LIBRARIES})
  INSTALL( TARGETS osSharpen RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_GradientMagnitude ON CACHE BOOL "Compute the magnitude of the gradient of an image" FORCE)
if(OS_GradientMagnitude)
  ADD_EXECUTABLE(osGradientMagnitude GradientMagnitude.cxx)
  TARGET_LINK_LIBRARIES(osGradientMagnitude ${ITK_LIBRARIES})
  INSTALL( TARGETS osGradientMagnitude RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_ConvertToMHD ON CACHE BOOL "Convert an image type to an ITK MetaImage (.mhd)" FORCE)
if(OS_ConvertToMHD)
  ADD_EXECUTABLE(osConvertToMHD ConvertToMHD.cxx)
  TARGET_LINK_LIBRARIES(osConvertToMHD ${ITK_LIBRARIES})
  INSTALL( TARGETS osConvertToMHD RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_DifferenceImage ON CACHE BOOL "Compute the different of two images" FORCE)
if(OS_DifferenceImage)
  ADD_EXECUTABLE(osDifferenceImage DifferenceImage.cxx)
  TARGET_LINK_LIBRARIES(osDifferenceImage ${ITK_LIBRARIES})
  INSTALL( TARGETS osDifferenceImage RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_DilateImage ON CACHE BOOL "Dilate an image" FORCE)
if(OS_DilateImage)
  ADD_EXECUTABLE(osDilateImage DilateImage.cxx)
  TARGET_LINK_LIBRARIES(osDilateImage ${ITK_LIBRARIES})
  INSTALL( TARGETS osDilateImage RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_ErodeImage ON CACHE BOOL "Erode an image" FORCE)
if(OS_ErodeImage)
  ADD_EXECUTABLE(osErodeImage ErodeImage.cxx)
  TARGET_LINK_LIBRARIES(osErodeImage ${ITK_LIBRARIES})
  INSTALL( TARGETS osErodeImage RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_ExtractComponent ON CACHE BOOL "Extract a specified component of an image" FORCE)
if(OS_ExtractComponent)
  ADD_EXECUTABLE(osExtractComponent ExtractComponent.cxx)
  TARGET_LINK_LIBRARIES(osExtractComponent ${ITK_LIBRARIES})
  INSTALL( TARGETS osExtractComponent RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_FindBoundary ON CACHE BOOL "Find the boundary of a binary region" FORCE)
if(OS_FindBoundary)
  ADD_EXECUTABLE(osFindBoundary FindBoundary.cxx)
  TARGET_LINK_LIBRARIES(osFindBoundary ${ITK_LIBRARIES})
  INSTALL( TARGETS osFindBoundary RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_FlipImage ON CACHE BOOL "Flip an image vertically" FORCE)
if(OS_FlipImage)
  ADD_EXECUTABLE(osFlipImage FlipImage.cxx)
  TARGET_LINK_LIBRARIES(osFlipImage ${ITK_LIBRARIES})
  INSTALL( TARGETS osFlipImage RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_ForwardDifferenceDerivatives ON CACHE BOOL "Compute the forward difference derivatives of an image" FORCE)
if(OS_ForwardDifferenceDerivatives)
  ADD_EXECUTABLE(osForwardDifferenceDerivatives ForwardDifferenceDerivatives.cxx)
  TARGET_LINK_LIBRARIES(osForwardDifferenceDerivatives ${ITK_LIBRARIES})
  INSTALL( TARGETS osForwardDifferenceDerivatives RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_InvertBinaryImage ON CACHE BOOL "Invert a binary image" FORCE)
if(OS_InvertBinaryImage)
  ADD_EXECUTABLE(osInvertBinaryImage InvertBinaryImage.cxx)
  TARGET_LINK_LIBRARIES(osInvertBinaryImage ${ITK_LIBRARIES})
  INSTALL( TARGETS osInvertBinaryImage RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_MaskImage ON CACHE BOOL "Mask an image" FORCE)
if(OS_MaskImage)
  ADD_EXECUTABLE(osMaskImage MaskImage.cxx)
  TARGET_LINK_LIBRARIES(osMaskImage ${ITK_LIBRARIES})
  INSTALL( TARGETS osMaskImage RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_MHDtoPNG ON CACHE BOOL "Convert an ITK MetaImage (.mhd) to a png" FORCE)
if(OS_MHDtoPNG)
  ADD_EXECUTABLE(osMHDtoPNG MHDtoPNG.cxx)
  TARGET_LINK_LIBRARIES(osMHDtoPNG ${ITK_LIBRARIES})
  INSTALL( TARGETS osMHDtoPNG RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_MultiplyScalar ON CACHE BOOL "Multiply an image (pixel-wise) by a scalar" FORCE)
if(OS_MultiplyScalar)
  ADD_EXECUTABLE(osMultiplyScalar MultiplyScalar.cxx)
  TARGET_LINK_LIBRARIES(osMultiplyScalar ${ITK_LIBRARIES})
  INSTALL( TARGETS osMultiplyScalar RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_OrImages ON CACHE BOOL "Binary OR two images" FORCE)
if(OS_OrImages)
  ADD_EXECUTABLE(osOrImages OrImages.cxx)
  TARGET_LINK_LIBRARIES(osOrImages ${ITK_LIBRARIES})
  INSTALL( TARGETS osOrImages RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_ReplaceComponent ON CACHE BOOL "Replace a component of an image" FORCE)
if(OS_ReplaceComponent)
  ADD_EXECUTABLE(osReplaceComponent ReplaceComponent.cxx)
  TARGET_LINK_LIBRARIES(osReplaceComponent ${ITK_LIBRARIES})
  INSTALL( TARGETS osReplaceComponent RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_ReplaceValue ON CACHE BOOL "Replace a value in an image" FORCE)
if(OS_ReplaceValue)
  ADD_EXECUTABLE(osReplaceValue ReplaceValue.cxx)
  TARGET_LINK_LIBRARIES(osReplaceValue ${ITK_LIBRARIES})
  INSTALL( TARGETS osReplaceValue RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_RescaleToPNG ON CACHE BOOL "Rescale an image" FORCE)
if(OS_RescaleToPNG)
  ADD_EXECUTABLE(osRescaleToPNG RescaleToPNG.cxx)
  TARGET_LINK_LIBRARIES(osRescaleToPNG ${ITK_LIBRARIES})
  INSTALL( TARGETS osRescaleToPNG RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_RGBtoGray ON CACHE BOOL "Convert an image to grayscale" FORCE)
if(OS_RGBtoGray)
  ADD_EXECUTABLE(osRGBtoGray RGBtoGray.cxx)
  TARGET_LINK_LIBRARIES(osRGBtoGray ${ITK_LIBRARIES})
  INSTALL( TARGETS osRGBtoGray RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_SetBoundaryToConstant ON CACHE BOOL "Set the boundary of an image to a constant value" FORCE)
if(OS_SetBoundaryToConstant)
  ADD_EXECUTABLE(osSetBoundaryToConstant SetBoundaryToConstant.cxx)
  TARGET_LINK_LIBRARIES(osSetBoundaryToConstant ${ITK_LIBRARIES})
  INSTALL( TARGETS osSetBoundaryToConstant RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_SmoothImage ON CACHE BOOL "Smooth an image" FORCE)
if(OS_SmoothImage)
  ADD_EXECUTABLE(osSmoothImage SmoothImage.cxx)
  TARGET_LINK_LIBRARIES(osSmoothImage ${ITK_LIBRARIES})
  INSTALL( TARGETS osSmoothImage RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_SquaredDifference ON CACHE BOOL "Compute the squared difference (pixel-wise) of two images" FORCE)
if(OS_SquaredDifference)
  ADD_EXECUTABLE(osSquaredDifference SquaredDifference.cxx)
  TARGET_LINK_LIBRARIES(osSquaredDifference ${ITK_LIBRARIES})
  INSTALL( TARGETS osSquaredDifference RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_ThresholdAbove ON CACHE BOOL "Threshold an image" FORCE)
if(OS_ThresholdAbove)
  ADD_EXECUTABLE(osThresholdAbove ThresholdAbove.cxx)
  TARGET_LINK_LIBRARIES(osThresholdAbove ${ITK_LIBRARIES})
  INSTALL( TARGETS osThresholdAbove RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_ThresholdBelow ON CACHE BOOL "Threshold an image" FORCE)
if(OS_ThresholdBelow)
  ADD_EXECUTABLE(osThresholdBelow ThresholdBelow.cxx)
  TARGET_LINK_LIBRARIES(osThresholdBelow ${ITK_LIBRARIES})
  INSTALL( TARGETS osThresholdBelow RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_XorImages ON CACHE BOOL "Binary XOR two images" FORCE)
if(OS_XorImages)
  ADD_EXECUTABLE(osXorImages XorImages.cxx)
  TARGET_LINK_LIBRARIES(osXorImages ${ITK_LIBRARIES})
  INSTALL( TARGETS osXorImages RUNTIME DESTINATION ${INSTALL_DIR} )
endif()
