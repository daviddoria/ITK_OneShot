cmake_minimum_required(VERSION 2.6)

PROJECT(ITK_OneShot)
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -std=gnu++0x")
SET( INSTALL_DIR ${CMAKE_INSTALL_PREFIX} )

FIND_PACKAGE(ITK REQUIRED ITKCommon ITKIOImageBase ITKTestKernel
             ITKImageIntensity ITKImageFeature ITKMathematicalMorphology ITKBinaryMathematicalMorphology ITKDistanceMap)
INCLUDE(${ITK_USE_FILE})

if(NOT TARGET ITKHelpers)
  add_subdirectory(ITKHelpers)
  include_directories(${ITKHelpers_includes})
endif()

# The 'os' prefix stands for "one shot" and is simply to group the executables when they are installed

SET(OS_AbsImage CACHE BOOL "Compute the absolute value (pixel-wise) of an image")
if(OS_AbsImage)
  ADD_EXECUTABLE(osAbsImage AbsImage.cxx)
  TARGET_LINK_LIBRARIES(osAbsImage ${ITK_LIBRARIES})
  INSTALL( TARGETS osAbsImage RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_ParaviewColorMap CACHE BOOL "Compute the absolute value (pixel-wise) of an image")
if(OS_ParaviewColorMap)
  ADD_EXECUTABLE(osParaviewColorMap ParaviewColorMap.cpp)
  TARGET_LINK_LIBRARIES(osParaviewColorMap ${ITK_LIBRARIES})
  INSTALL( TARGETS osParaviewColorMap RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_ClampImage CACHE BOOL "Compute the absolute value (pixel-wise) of an image")
if(OS_ClampImage)
  ADD_EXECUTABLE(osClampImage ClampImage.cpp)
  TARGET_LINK_LIBRARIES(osClampImage ${ITK_LIBRARIES})
  INSTALL( TARGETS osClampImage RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_AsciiToImage CACHE BOOL "Compute the absolute value (pixel-wise) of an image")
if(OS_AsciiToImage)
  ADD_EXECUTABLE(osAsciiToImage AsciiToImage.cpp)
  TARGET_LINK_LIBRARIES(osAsciiToImage ${ITK_LIBRARIES})
  INSTALL( TARGETS osAsciiToImage RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_Binarize CACHE BOOL "Create a binary image.")
if(OS_Binarize)
  ADD_EXECUTABLE(osBinarize Binarize.cxx)
  TARGET_LINK_LIBRARIES(osBinarize ${ITK_LIBRARIES})
  INSTALL( TARGETS osBinarize RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_CreateConstantRGBImage CACHE BOOL "Create a binary image.")
if(OS_CreateConstantRGBImage)
  ADD_EXECUTABLE(osCreateConstantRGBImage CreateConstantRGBImage.cpp)
  TARGET_LINK_LIBRARIES(osCreateConstantRGBImage ${ITK_LIBRARIES})
  INSTALL( TARGETS osCreateConstantRGBImage RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_CreateConstantScalarImage CACHE BOOL "Create a binary image.")
if(OS_CreateConstantScalarImage)
  ADD_EXECUTABLE(osCreateConstantScalarImage CreateConstantScalarImage.cpp)
  TARGET_LINK_LIBRARIES(osCreateConstantScalarImage ${ITK_LIBRARIES})
  INSTALL( TARGETS osCreateConstantScalarImage RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_CreateConstantVectorImage CACHE BOOL "Create a vector image where every element of every pixel is set to the same scalar.")
if(OS_CreateConstantVectorImage)
  ADD_EXECUTABLE(osCreateConstantVectorImage CreateConstantVectorImage.cpp)
  TARGET_LINK_LIBRARIES(osCreateConstantVectorImage ${ITK_LIBRARIES})
  INSTALL( TARGETS osCreateConstantVectorImage RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_Downsample CACHE BOOL "Downsample an image")
if(OS_Downsample)
  ADD_EXECUTABLE(osDownsample Downsample.cxx)
  TARGET_LINK_LIBRARIES(osDownsample ${ITK_LIBRARIES})
  INSTALL( TARGETS osDownsample RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_Information CACHE BOOL "Output information about an image")
if(OS_Information)
  ADD_EXECUTABLE(osInformation Information.cxx)
  TARGET_LINK_LIBRARIES(osInformation ${ITK_LIBRARIES})
  INSTALL( TARGETS osInformation RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_RGBtoHSV CACHE BOOL "Convert an RGB image to an HSV image")
if(OS_RGBtoHSV)
  ADD_EXECUTABLE(osRGBtoHSV RGBtoHSV.cxx)
  TARGET_LINK_LIBRARIES(osRGBtoHSV ${ITK_LIBRARIES})
  INSTALL( TARGETS osRGBtoHSV RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_MetaImageToPseudoColor CACHE BOOL "Convert a meta image to an RGB image")
if(OS_MetaImageToPseudoColor)
  ADD_EXECUTABLE(osMetaImageToPseudoColor MetaImageToPseudoColor.cpp)
  TARGET_LINK_LIBRARIES(osMetaImageToPseudoColor ${ITK_LIBRARIES})
  INSTALL( TARGETS osMetaImageToPseudoColor RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_MetaImageToRGB_PNG CACHE BOOL "Convert a meta image to an RGB image")
if(OS_MetaImageToRGB_PNG)
  ADD_EXECUTABLE(osMetaImageToRGB_PNG MetaImageToRGB_PNG.cxx)
  TARGET_LINK_LIBRARIES(osMetaImageToRGB_PNG ${ITK_LIBRARIES})
  INSTALL( TARGETS osMetaImageToRGB_PNG RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_AddImages CACHE BOOL "Add two images")
if(OS_AddImages)
  ADD_EXECUTABLE(osAddImages AddImages.cxx)
  TARGET_LINK_LIBRARIES(osAddImages ${ITK_LIBRARIES})
  INSTALL( TARGETS osAddImages RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_AddNoise CACHE BOOL "Add noise to an image")
if(OS_AddNoise)
  ADD_EXECUTABLE(osAddNoise AddNoise.cxx)
  TARGET_LINK_LIBRARIES(osAddNoise ${ITK_LIBRARIES})
  INSTALL( TARGETS osAddNoise RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_Blur CACHE BOOL "Blur an image")
if(OS_Blur)
  ADD_EXECUTABLE(osBlur Blur.cxx)
  TARGET_LINK_LIBRARIES(osBlur ${ITK_LIBRARIES})
  INSTALL( TARGETS osBlur RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_RGBtoLuminance CACHE BOOL "Append channels to an image")
if(OS_RGBtoLuminance)
  ADD_EXECUTABLE(osRGBtoLuminance RGBtoLuminance.cpp)
  TARGET_LINK_LIBRARIES(osRGBtoLuminance ${ITK_LIBRARIES})
  INSTALL( TARGETS osRGBtoLuminance RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_AndImages CACHE BOOL "Binary AND two images")
if(OS_AndImages)
  ADD_EXECUTABLE(osAndImages AndImages.cxx)
  TARGET_LINK_LIBRARIES(osAndImages ${ITK_LIBRARIES})
  INSTALL( TARGETS osAndImages RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_AppendImageComponents CACHE BOOL "Append channels to an image")
if(OS_AppendImageComponents)
  ADD_EXECUTABLE(osAppendImageComponents AppendImageComponents.cxx)
  TARGET_LINK_LIBRARIES(osAppendImageComponents ${ITK_LIBRARIES})
  INSTALL( TARGETS osAppendImageComponents RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_AppendImages CACHE BOOL "Append channels of images")
if(OS_AppendImages)
  ADD_EXECUTABLE(osAppendImages AppendImages.cxx)
  TARGET_LINK_LIBRARIES(osAppendImages ${ITK_LIBRARIES})
  INSTALL( TARGETS osAppendImages RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_CannyEdges CACHE BOOL "Compute the edges in an image")
if(OS_CannyEdges)
  ADD_EXECUTABLE(osCannyEdges CannyEdges.cxx)
  TARGET_LINK_LIBRARIES(osCannyEdges ${ITK_LIBRARIES})
  INSTALL( TARGETS osCannyEdges RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_CentralDifferenceDerivatives CACHE BOOL "Compute the derivatives of an image")
if(OS_CentralDifferenceDerivatives)
  ADD_EXECUTABLE(osCentralDifferenceDerivatives CentralDifferenceDerivatives.cxx)
  TARGET_LINK_LIBRARIES(osCentralDifferenceDerivatives ${ITK_LIBRARIES})
  INSTALL( TARGETS osCentralDifferenceDerivatives RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_ComputeGradient CACHE BOOL "Compute the derivatives of an image")
if(OS_ComputeGradient)
  ADD_EXECUTABLE(osComputeGradient ComputeGradient.cpp)
  TARGET_LINK_LIBRARIES(osComputeGradient ${ITK_LIBRARIES})
  INSTALL( TARGETS osComputeGradient RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_ComputeLaplacian CACHE BOOL "Compute the Laplacian of an image")
if(OS_ComputeLaplacian)
  ADD_EXECUTABLE(osComputeLaplacian ComputeLaplacian.cxx)
  TARGET_LINK_LIBRARIES(osComputeLaplacian ${ITK_LIBRARIES})
  INSTALL( TARGETS osComputeLaplacian RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_Sharpen CACHE BOOL "Sharpen an image")
if(OS_Sharpen)
  ADD_EXECUTABLE(osSharpen Sharpen.cxx)
  TARGET_LINK_LIBRARIES(osSharpen ${ITK_LIBRARIES})
  INSTALL( TARGETS osSharpen RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_GradientMagnitude CACHE BOOL "Compute the magnitude of the gradient of an image")
if(OS_GradientMagnitude)
  ADD_EXECUTABLE(osGradientMagnitude GradientMagnitude.cxx)
  TARGET_LINK_LIBRARIES(osGradientMagnitude ${ITK_LIBRARIES})
  INSTALL( TARGETS osGradientMagnitude RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_ConvertToMetaImage CACHE BOOL "Convert an image type to an ITK MetaImage (.mhd+.raw) or (.mha)")
if(OS_ConvertToMetaImage)
  ADD_EXECUTABLE(osConvertToMetaImage ConvertToMetaImage.cxx)
  TARGET_LINK_LIBRARIES(osConvertToMetaImage ${ITK_LIBRARIES})
  INSTALL( TARGETS osConvertToMetaImage RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_DifferenceImage CACHE BOOL "Compute the different of two images")
if(OS_DifferenceImage)
  ADD_EXECUTABLE(osDifferenceImage DifferenceImage.cxx)
  TARGET_LINK_LIBRARIES(osDifferenceImage ${ITK_LIBRARIES})
  INSTALL( TARGETS osDifferenceImage RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_DilateImage CACHE BOOL "Dilate an image")
if(OS_DilateImage)
  ADD_EXECUTABLE(osDilateImage DilateImage.cxx)
  TARGET_LINK_LIBRARIES(osDilateImage ${ITK_LIBRARIES})
  INSTALL( TARGETS osDilateImage RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_ErodeImage CACHE BOOL "Erode an image")
if(OS_ErodeImage)
  ADD_EXECUTABLE(osErodeImage ErodeImage.cxx)
  TARGET_LINK_LIBRARIES(osErodeImage ${ITK_LIBRARIES})
  INSTALL( TARGETS osErodeImage RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_ExtractComponents CACHE BOOL "Extract specified components of an image")
if(OS_ExtractComponents)
  ADD_EXECUTABLE(osExtractComponents ExtractComponents.cxx)
  TARGET_LINK_LIBRARIES(osExtractComponents ${ITK_LIBRARIES})
  INSTALL( TARGETS osExtractComponents RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_ExtractComponentsPNG CACHE BOOL "Extract specified components of a PNG (unsigned char) image")
if(OS_ExtractComponentsPNG)
  ADD_EXECUTABLE(osExtractComponentsPNG ExtractComponentsPNG.cxx)
  TARGET_LINK_LIBRARIES(osExtractComponentsPNG ${ITK_LIBRARIES})
  INSTALL( TARGETS osExtractComponentsPNG RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_ExtractRegion CACHE BOOL "Extract a specified region of an image")
if(OS_ExtractRegion)
  ADD_EXECUTABLE(osExtractRegion ExtractRegion.cpp)
  TARGET_LINK_LIBRARIES(osExtractRegion ${ITK_LIBRARIES} ITKHelpers)
  INSTALL( TARGETS osExtractRegion RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_FindBoundary CACHE BOOL "Find the boundary of a binary region")
if(OS_FindBoundary)
  ADD_EXECUTABLE(osFindBoundary FindBoundary.cxx)
  TARGET_LINK_LIBRARIES(osFindBoundary ${ITK_LIBRARIES})
  INSTALL( TARGETS osFindBoundary RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_FlipImage CACHE BOOL "Flip an image vertically")
if(OS_FlipImage)
  ADD_EXECUTABLE(osFlipImage FlipImage.cxx)
  TARGET_LINK_LIBRARIES(osFlipImage ${ITK_LIBRARIES} ITKHelpers)
  INSTALL( TARGETS osFlipImage RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_ForwardDifferenceDerivatives CACHE BOOL "Compute the forward difference derivatives of an image")
if(OS_ForwardDifferenceDerivatives)
  ADD_EXECUTABLE(osForwardDifferenceDerivatives ForwardDifferenceDerivatives.cxx)
  TARGET_LINK_LIBRARIES(osForwardDifferenceDerivatives ${ITK_LIBRARIES})
  INSTALL( TARGETS osForwardDifferenceDerivatives RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_ImageToAscii CACHE BOOL "Invert a binary image")
if(OS_ImageToAscii)
  ADD_EXECUTABLE(osImageToAscii ImageToAscii.cpp)
  TARGET_LINK_LIBRARIES(osImageToAscii ${ITK_LIBRARIES})
  INSTALL( TARGETS osImageToAscii RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_InvertBinaryImage CACHE BOOL "Invert a binary image")
if(OS_InvertBinaryImage)
  ADD_EXECUTABLE(osInvertBinaryImage InvertBinaryImage.cxx)
  TARGET_LINK_LIBRARIES(osInvertBinaryImage ${ITK_LIBRARIES})
  INSTALL( TARGETS osInvertBinaryImage RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_Magnitude CACHE BOOL "Produce the magnitude image.")
if(OS_Magnitude)
  ADD_EXECUTABLE(osMagnitude Magnitude.cxx)
  TARGET_LINK_LIBRARIES(osMagnitude ${ITK_LIBRARIES})
  INSTALL( TARGETS osMagnitude RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_MakeImagePositive CACHE BOOL "Make the image positive by adding its minimum to every pixel.")
if(OS_MakeImagePositive)
  ADD_EXECUTABLE(osMakeImagePositive MakeImagePositive.cxx)
  TARGET_LINK_LIBRARIES(osMakeImagePositive ${ITK_LIBRARIES})
  INSTALL( TARGETS osMakeImagePositive RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_MarkPoints CACHE BOOL "Mark points.")
if(OS_MarkPoints)
  ADD_EXECUTABLE(osMarkPoints MarkPoints.cxx)
  TARGET_LINK_LIBRARIES(MarkPoints ${ITK_LIBRARIES})
  INSTALL( TARGETS osMarkPoints RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_MaskBoundingBox CACHE BOOL "Mask an image")
if(OS_MaskBoundingBox)
  ADD_EXECUTABLE(osMaskBoundingBox MaskBoundingBox.cpp)
  TARGET_LINK_LIBRARIES(osMaskBoundingBox ${ITK_LIBRARIES})
  INSTALL( TARGETS osMaskBoundingBox RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_MaskImage CACHE BOOL "Mask an image")
if(OS_MaskImage)
  ADD_EXECUTABLE(osMaskImage MaskImage.cxx)
  TARGET_LINK_LIBRARIES(osMaskImage ${ITK_LIBRARIES})
  INSTALL( TARGETS osMaskImage RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_CreateMaskFromImage CACHE BOOL "Mask an image")
if(OS_CreateMaskFromImage)
  ADD_EXECUTABLE(osCreateMaskFromImage CreateMaskFromImage.cxx)
  TARGET_LINK_LIBRARIES(osCreateMaskFromImage ${ITK_LIBRARIES})
  INSTALL( TARGETS osCreateMaskFromImage RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_MHDtoPNG CACHE BOOL "Convert an ITK MetaImage (.mhd) to a png")
if(OS_MHDtoPNG)
  ADD_EXECUTABLE(osMHDtoPNG MHDtoPNG.cxx)
  TARGET_LINK_LIBRARIES(osMHDtoPNG ${ITK_LIBRARIES})
  INSTALL( TARGETS osMHDtoPNG RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_MultiplyScalar CACHE BOOL "Multiply an image (pixel-wise) by a scalar")
if(OS_MultiplyScalar)
  ADD_EXECUTABLE(osMultiplyScalar MultiplyScalar.cxx)
  TARGET_LINK_LIBRARIES(osMultiplyScalar ${ITK_LIBRARIES})
  INSTALL( TARGETS osMultiplyScalar RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_OrImages CACHE BOOL "Binary OR two images")
if(OS_OrImages)
  ADD_EXECUTABLE(osOrImages OrImages.cxx)
  TARGET_LINK_LIBRARIES(osOrImages ${ITK_LIBRARIES})
  INSTALL( TARGETS osOrImages RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_ReplaceComponent CACHE BOOL "Replace a component of an image")
if(OS_ReplaceComponent)
  ADD_EXECUTABLE(osReplaceComponent ReplaceComponent.cxx)
  TARGET_LINK_LIBRARIES(osReplaceComponent ${ITK_LIBRARIES})
  INSTALL( TARGETS osReplaceComponent RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_ReplaceRegion CACHE BOOL "Replace a region in an image with the same region in another image.")
if(OS_ReplaceRegion)
  ADD_EXECUTABLE(osReplaceRegion ReplaceRegion.cpp)
  TARGET_LINK_LIBRARIES(osReplaceRegion ${ITK_LIBRARIES})
  INSTALL( TARGETS osReplaceRegion RUNTIME DESTINATION ${INSTALL_DIR} )
endif()


SET(OS_ReplaceValue CACHE BOOL "Replace a value in an image")
if(OS_ReplaceValue)
  ADD_EXECUTABLE(osReplaceValue ReplaceValue.cxx)
  TARGET_LINK_LIBRARIES(osReplaceValue ${ITK_LIBRARIES})
  INSTALL( TARGETS osReplaceValue RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_Rescale CACHE BOOL "Rescale an image")
if(OS_Rescale)
  ADD_EXECUTABLE(osRescale Rescale.cxx)
  TARGET_LINK_LIBRARIES(osRescale ${ITK_LIBRARIES})
  INSTALL( TARGETS osRescale RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_RescaleToRange CACHE BOOL "Rescale an image")
if(OS_RescaleToRange)
  ADD_EXECUTABLE(osRescaleToRange RescaleToRange.cxx)
  TARGET_LINK_LIBRARIES(osRescaleToRange ${ITK_LIBRARIES})
  INSTALL( TARGETS osRescaleToRange RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_RescaleToPNG CACHE BOOL "Rescale an image")
if(OS_RescaleToPNG)
  ADD_EXECUTABLE(osRescaleToPNG RescaleToPNG.cxx)
  TARGET_LINK_LIBRARIES(osRescaleToPNG ${ITK_LIBRARIES})
  INSTALL( TARGETS osRescaleToPNG RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_ResetImage CACHE BOOL "Reset the origin of an image.")
if(OS_ResetImage)
  ADD_EXECUTABLE(osResetImage ResetImage.cpp)
  TARGET_LINK_LIBRARIES(osResetImage ${ITK_LIBRARIES})
  INSTALL( TARGETS osResetImage RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_ResetOrigin CACHE BOOL "Reset the origin of an image.")
if(OS_ResetOrigin)
  ADD_EXECUTABLE(osResetOrigin ResetOrigin.cxx)
  TARGET_LINK_LIBRARIES(osResetOrigin ${ITK_LIBRARIES})
  INSTALL( TARGETS osResetOrigin RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_RGBtoGray CACHE BOOL "Convert an image to grayscale")
if(OS_RGBtoGray)
  ADD_EXECUTABLE(osRGBtoGray RGBtoGray.cxx)
  TARGET_LINK_LIBRARIES(osRGBtoGray ${ITK_LIBRARIES})
  INSTALL( TARGETS osRGBtoGray RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_SetBoundaryToConstant CACHE BOOL "Set the boundary of an image to a constant value")
if(OS_SetBoundaryToConstant)
  ADD_EXECUTABLE(osSetBoundaryToConstant SetBoundaryToConstant.cxx)
  TARGET_LINK_LIBRARIES(osSetBoundaryToConstant ${ITK_LIBRARIES})
  INSTALL( TARGETS osSetBoundaryToConstant RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_SmoothImage CACHE BOOL "Smooth an image")
if(OS_SmoothImage)
  ADD_EXECUTABLE(osSmoothImage SmoothImage.cxx)
  TARGET_LINK_LIBRARIES(osSmoothImage ${ITK_LIBRARIES})
  INSTALL( TARGETS osSmoothImage RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_SquaredDifference CACHE BOOL "Compute the squared difference (pixel-wise) of two images")
if(OS_SquaredDifference)
  ADD_EXECUTABLE(osSquaredDifference SquaredDifference.cxx)
  TARGET_LINK_LIBRARIES(osSquaredDifference ${ITK_LIBRARIES})
  INSTALL( TARGETS osSquaredDifference RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_StretchImage CACHE BOOL "Stretch an image to a specified width/height")
if(OS_StretchImage)
  ADD_EXECUTABLE(osStretchImage StretchImage.cxx)
  TARGET_LINK_LIBRARIES(osStretchImage ${ITK_LIBRARIES})
  INSTALL( TARGETS osStretchImage RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_ThresholdAbove CACHE BOOL "Threshold an image")
if(OS_ThresholdAbove)
  ADD_EXECUTABLE(osThresholdAbove ThresholdAbove.cxx)
  TARGET_LINK_LIBRARIES(osThresholdAbove ${ITK_LIBRARIES})
  INSTALL( TARGETS osThresholdAbove RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_ThresholdBelow CACHE BOOL "Threshold an image")
if(OS_ThresholdBelow)
  ADD_EXECUTABLE(osThresholdBelow ThresholdBelow.cxx)
  TARGET_LINK_LIBRARIES(osThresholdBelow ${ITK_LIBRARIES})
  INSTALL( TARGETS osThresholdBelow RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_ThresholdOutside CACHE BOOL "Threshold an image")
if(OS_ThresholdOutside)
  ADD_EXECUTABLE(osThresholdOutside ThresholdOutside.cpp)
  TARGET_LINK_LIBRARIES(osThresholdOutside ${ITK_LIBRARIES})
  INSTALL( TARGETS osThresholdOutside RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_XorImages CACHE BOOL "Binary XOR two images")
if(OS_XorImages)
  ADD_EXECUTABLE(osXorImages XorImages.cxx)
  TARGET_LINK_LIBRARIES(osXorImages ${ITK_LIBRARIES})
  INSTALL( TARGETS osXorImages RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_MetaImageFloatToMetaImageUnsignedChar CACHE BOOL "Convert a float meta image to a unsigned char meta image")
if(OS_MetaImageFloatToMetaImageUnsignedChar)
  ADD_EXECUTABLE(osMetaImageFloatToMetaImageUnsignedChar MetaImageFloatToMetaImageUnsignedChar.cpp)
  TARGET_LINK_LIBRARIES(osMetaImageFloatToMetaImageUnsignedChar ${ITK_LIBRARIES})
  INSTALL( TARGETS osMetaImageFloatToMetaImageUnsignedChar RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_LaplacianFromDerivatives CACHE BOOL "Compute the Laplacian from the derivatives of image")
if(OS_LaplacianFromDerivatives)
  ADD_EXECUTABLE(osLaplacianFromDerivatives LaplacianFromDerivatives.cpp)
  TARGET_LINK_LIBRARIES(osLaplacianFromDerivatives ${ITK_LIBRARIES})
  INSTALL( TARGETS osLaplacianFromDerivatives RUNTIME DESTINATION ${INSTALL_DIR} )
endif()

SET(OS_SetBoundaryToConstantFloat CACHE BOOL "Compute the Laplacian from the derivatives of image")
if(OS_SetBoundaryToConstantFloat)
  ADD_EXECUTABLE(osSetBoundaryToConstantFloat SetBoundaryToConstantFloat.cpp)
  TARGET_LINK_LIBRARIES(osSetBoundaryToConstantFloat ${ITK_LIBRARIES})
  INSTALL( TARGETS osSetBoundaryToConstantFloat RUNTIME DESTINATION ${INSTALL_DIR} )
endif()


################
add_subdirectory(Tests)
